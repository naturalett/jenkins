<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1268.v6eb_e2ee1a_85a">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3606.v0b_d8b_e512dcf">
    <script>@Grab(group = &apos;com.twilio.sdk&apos;, module = &apos;twilio&apos;, version = &apos;9.2.1&apos;)
import com.twilio.Twilio;
import com.twilio.rest.api.v2010.account.Message;
import com.twilio.type.PhoneNumber;
import groovy.transform.Field
@Field String customImage, publicIP

pipeline {
    agent {
        docker {
            image &apos;docker:19.03.12&apos;
            args &apos;-v /var/run/docker.sock:/var/run/docker.sock -v /var/workshop-creds:/home&apos;
        }
    }
    stages {
        stage(&apos;Clone&apos;) {
            steps {
                deleteDir()

                git branch: &apos;main&apos;, url: &apos;https://github.com/naturalett/jenkins.git&apos;
            }
        }
        stage(&apos;Initialization&apos;) {
            steps {
              script {
                docker.image(&apos;alpine&apos;).inside {
                    sh &quot;&quot;&quot;
                    apk add curl
                    curl http://checkip.amazonaws.com &gt; publicIP&quot;&quot;&quot;.trim()
                }
                publicIP = readFile(&apos;publicIP&apos;).trim()
              }
            }
        }
        stage(&apos;Build&apos;) {
            steps {
              script {
                dir(&apos;Application/&apos;) {
                  customImage = docker.build(&quot;naturalett/hello-world:${env.BUILD_ID}&quot;)
                }
              }
            }
        }
        stage(&apos;Test&apos;) {
            steps {
              script {
                dir(&apos;Application/&apos;) {
                  docker.image(&apos;python:3.7-slim&apos;).inside {
                      sh &quot;&quot;&quot;#!/bin/bash
                      python3 -m venv venv
                      source venv/bin/activate
                      pip install -r requirements.txt
                      pytest test_*.py -v --junitxml=&apos;test-results.xml&apos;&quot;&quot;&quot;
                  }
                }
              }
            }
        }
        stage(&apos;Display Results&apos;) {
            steps {
              dir(&apos;Application/&apos;) {
                echo &apos;Displaying Results...&apos;
                junit allowEmptyResults: true, testResults: &apos;test-results.xml&apos;
              }
            }
        }
        stage(&apos;Artifact&apos;) {
            steps {
              script {
                sh &apos;/bin/sh /var/workshop-creds/docker_login.sh&apos;
                customImage.push()
                customImage.push(&apos;latest&apos;)
              }
            }
        }
        stage(&apos;Deploy&apos;) {
            steps {
                sh &quot;docker run -it --name python-hello-world-${env.BUILD_ID} -d -p81:81 naturalett/hello-world:${env.BUILD_ID}&quot;
                echo &quot;Check you deployment in the following link: http://${publicIP}:81/home&quot;
                sleep 60
            }
        }
        stage(&apos;CleanUp&apos;) {
            steps {
                sh &quot;docker stop python-hello-world-${env.BUILD_ID} &amp;&amp; docker rm python-hello-world-${env.BUILD_ID}&quot;
            }
        }
    }
    post {
        success {
          script {
            try {
              load &quot;/var/workshop-creds/env-file.groovy&quot;
              Twilio.init(env.accountSid, env.authToken)
              Message message = Message.creator(
                      new com.twilio.type.PhoneNumber(env.phoneNumber),
                      env.SERVICE_SID,
                      &quot;Your Pipeline: ${env.JOB_NAME}, Number: ${env.BUILD_NUMBER} passed successfully&quot;)
                  .create();
              echo message.getSid()
            } catch(Exception e) {
              echo &quot;Failed to load env-file.groovy&quot;
            }
            currentBuild.description = &quot;Passed successfully. Message sent!&quot;
          }
        }
        failure {
          script {
            try {
              load &quot;/var/workshop-creds/env-file.groovy&quot;
              Twilio.init(env.accountSid, env.authToken)
              Message message = Message.creator(
                      new com.twilio.type.PhoneNumber(env.phoneNumber),
                      env.SERVICE_SID,
                      &quot;Your Pipeline: ${env.JOB_NAME}, Number: ${env.BUILD_NUMBER} failed&quot;)
                  .create();
              echo message.getSid()
            } catch(Exception e) {
              echo &quot;Failed to load env-file.groovy&quot;
            }
            currentBuild.description = &quot;Failed. Message sent!&quot;
          }
        }
        always {
          script {           
            deleteDir()
          }
        }
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>